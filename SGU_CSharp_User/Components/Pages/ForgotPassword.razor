@page "/forgot-password"
@using SGU_CSharp_User.Model
@using SGU_CSharp_User.Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject NguoiDungService NguoiDungService
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Quên mật khẩu</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Khôi phục mật khẩu</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    @if (isSuccess)
                    {
                        <div class="alert alert-success" role="alert">
                            Mật khẩu đã được thay đổi thành công! Vui lòng đăng nhập lại.
                        </div>
                    }

                    @if (!isVerified)
                    {
                        <EditForm Model="@resetModel" OnSubmit="HandleVerification">
                            <DataAnnotationsValidator />
                            <div class="form-group mb-3">
                                <label for="email">Email:</label>
                                <InputText id="email" class="form-control" @bind-Value="resetModel.Email" />
                                <ValidationMessage For="@(() => resetModel.Email)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="phone">Số điện thoại:</label>
                                <InputText id="phone" class="form-control" @bind-Value="resetModel.PhoneNumber" />
                                <ValidationMessage For="@(() => resetModel.PhoneNumber)" />
                                <small class="form-text text-muted">
                                    Nhập số điện thoại đã đăng ký với tài khoản
                                </small>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Đang xử lý...</span>
                                    }
                                    else
                                    {
                                        <span>Xác nhận</span>
                                    }
                                </button>
                                <a href="/login" class="btn btn-outline-secondary">Quay lại đăng nhập</a>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="@resetModel" OnSubmit="HandlePasswordReset">
                            <DataAnnotationsValidator />

                            <div class="form-group mb-3">
                                <label for="newPassword">Mật khẩu mới:</label>
                                <div class="input-group">
                                    <InputText type="@(showPassword ? "text" : "password")"
                                    id="newPassword"
                                    class="form-control"
                                    @bind-Value="resetModel.NewPassword" />
                                    <button class="btn btn-outline-secondary"
                                    type="button"
                                    @onclick="TogglePasswordVisibility">
                                        <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => resetModel.NewPassword)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="confirmPassword">Xác nhận mật khẩu:</label>
                                <div class="input-group">
                                    <InputText type="@(showConfirmPassword ? "text" : "password")"
                                    id="confirmPassword"
                                    class="form-control"
                                    @bind-Value="resetModel.ConfirmPassword" />
                                    <button class="btn btn-outline-secondary"
                                    type="button"
                                    @onclick="ToggleConfirmPasswordVisibility">
                                        <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Đang xử lý...</span>
                                    }
                                    else
                                    {
                                        <span>Đổi mật khẩu</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PasswordResetModel resetModel = new();
    private bool isLoading = false;
    private bool isVerified = false;
    private bool isSuccess = false;
    private string? errorMessage;
    private bool showPassword = false;
    private bool showConfirmPassword = false;

    private async Task HandleVerification()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            if (!ValidateEmailAndPhone(resetModel.Email, resetModel.PhoneNumber, out string validationError))
            {
                errorMessage = validationError;
                return;
            }
            // Kiểm tra email và số điện thoại từ NguoiDungService
            var user = await NguoiDungService.GetUserByEmailAndPhone(resetModel.Email, resetModel.PhoneNumber);

            if (user != null)
            {
                isVerified = true;
            }
            else
            {
                errorMessage = "Email hoặc số điện thoại không chính xác";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Đã có lỗi xảy ra. Vui lòng thử lại sau.";
            Console.WriteLine($"Error in HandleVerification: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandlePasswordReset()
    {
        try
        {
            if (!ValidatePasswords(resetModel.NewPassword, resetModel.ConfirmPassword, out string validationError))
            {
                errorMessage = validationError;
                return;
            }

            isLoading = true;
            errorMessage = null;

            // Cập nhật mật khẩu mới
            var user = await NguoiDungService.GetUserByEmailAndPhone(resetModel.Email, resetModel.PhoneNumber);
            if (user != null)
            {
                // Cập nhật mật khẩu mới cho user
                user.MatKhau = resetModel.NewPassword;
                var updateResult = await NguoiDungService.UpdatePasswordForgot(resetModel.Email,resetModel.PhoneNumber, resetModel.NewPassword);

                if (updateResult.Success)
                {
                    isSuccess = true;
                    await Task.Delay(2000); // Đợi 2 giây
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    errorMessage = updateResult.Message;
                }
            }
            else
            {
                errorMessage = "Không tìm thấy thông tin người dùng";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Đã có lỗi xảy ra. Vui lòng thử lại sau.";
            Console.WriteLine($"Error in HandlePasswordReset: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private bool ValidateEmailAndPhone(string email, string phoneNumber, out string errorMsg)
    {
        errorMsg = string.Empty;

        if (string.IsNullOrWhiteSpace(email))
        {
            errorMsg = "Vui lòng nhập email";
            return false;
        }

        if (!new EmailAddressAttribute().IsValid(email))
        {
            errorMsg = "Email không hợp lệ";
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            errorMsg = "Vui lòng nhập số điện thoại";
            return false;
        }

        if (!new PhoneAttribute().IsValid(phoneNumber))
        {
            errorMsg = "Số điện thoại không hợp lệ";
            return false;
        }

        return true;
    }

    private bool ValidatePasswords(string newPassword, string confirmPassword, out string errorMsg)
    {
        errorMsg = string.Empty;

        if (string.IsNullOrWhiteSpace(newPassword))
        {
            errorMsg = "Vui lòng nhập mật khẩu mới";
            return false;
        }

        // Kiểm tra độ phức tạp của mật khẩu bằng Regular Expression
        var regex = new System.Text.RegularExpressions.Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{6,}$");
        if (!regex.IsMatch(newPassword))
        {
            errorMsg = "Mật khẩu phải có ít nhất 1 ký tự viết hoa, 1 ký tự viết thường, 1 chữ số và 1 ký tự đặc biệt";
            return false;
        }

        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            errorMsg = "Vui lòng xác nhận mật khẩu";
            return false;
        }

        if (newPassword != confirmPassword)
        {
            errorMsg = "Mật khẩu xác nhận không khớp";
            return false;
        }

        return true;
    }



    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    public class PasswordResetModel
    {
        [Required(ErrorMessage = "Vui lòng nhập email")]
        [EmailAddress(ErrorMessage = "Email không hợp lệ")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng nhập số điện thoại")]
        [Phone(ErrorMessage = "Số điện thoại không hợp lệ")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng nhập mật khẩu mới")]
        [MinLength(6, ErrorMessage = "Mật khẩu phải có ít nhất 6 ký tự")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng xác nhận mật khẩu")]
        [Compare("NewPassword", ErrorMessage = "Mật khẩu xác nhận không khớp")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
