@page "/booking/device"
@using SGU_CSharp_User.Model
@using SGU_CSharp_User.Service
@using SGU_CSharp_User.Components.Shared
@inject DeviceService DeviceService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Đặt thiết bị</PageTitle>

<div class="container">
    <h1>Đặt mượn thiết bị</h1>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <EditForm Model="BookingModel" OnValidSubmit="PrepareBooking">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="form-group">
            <label for="device">Chọn thiết bị:</label>
            <div class="search-combobox">
                <div class="search-combobox-input-container">
                    <input id="deviceSearchInput"
                           type="text"
                           class="form-control"
                           placeholder="Nhập để tìm thiết bị..."
                           autocomplete="off"
                           @bind="searchInput"
                           @bind:event="oninput"
                           @onfocus="HandleInputFocus"
                           @onkeyup="HandleKeyUp" />
                    <button class="search-combobox-toggle" type="button" @onclick="ToggleDropdown">
                        <i class="bi bi-caret-down-fill"></i>
                    </button>
                </div>

                @if (isDropdownOpen)
                {
                    <div class="search-combobox-dropdown">
                        @if (!filteredDevices.Any())
                        {
                            <div class="search-combobox-item search-combobox-no-results">
                                Không tìm thấy thiết bị
                            </div>
                        }
                        else
                        {
                            @foreach (var device in filteredDevices)
                            {
                                <div class="search-combobox-item @(device.MaThietBi == BookingModel.MaThietBi ? "selected" : "")"
                                     @onclick="() => SelectDevice(device)">
                                    <span class="device-name">@device.TenThietBi</span>
                                    <span class="device-price">@device.GiaMuon.ToString("#,##0") đ</span>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <ValidationMessage For="@(() => BookingModel.MaThietBi)" class="text-danger" />
        </div>

        <!-- Device select -->
        <div class="selected-device-info">
            @if (SelectedDevice != null)
            {
                <div class="selected-device">
                    <div class="device-header">Thiết bị đã chọn</div>
                    <div class="device-details">
                        <div class="device-name">@SelectedDevice.TenThietBi</div>
                        <div class="device-price">@SelectedDevice.GiaMuon.ToString("#,##0") đ/lần</div>
                    </div>
                </div>
            }
            else
            {
                <div class="no-device-selected">
                    <i class="bi bi-info-circle-fill"></i> Vui lòng chọn thiết bị
                </div>
            }
        </div>


        <div class="form-group">
            <label for="borrowDate">Ngày mượn:</label>
            <InputDate id="borrowDate" @bind-Value="dateTime" class="form-control" />
            <ValidationMessage For="@(() => BookingModel.ThoiGianMuon)" class="text-danger" />
        </div>

        <div class="form-group time">
            <div>
                <label for="startTime">Giờ bắt đầu:</label>
                <TimePickerComponent @bind-Value="StartTime"
                MinTime="new TimeSpan(7, 0, 0)"
                MaxTime="new TimeSpan(22, 0, 0)" />
                <ValidationMessage For="@(() => StartTime)" class="text-danger" />
            </div>
            <div>
                <label for="endTime">Giờ kết thúc:</label>
                <TimePickerComponent @bind-Value="EndTime"
                MinTime="new TimeSpan(7, 0, 0)"
                MaxTime="new TimeSpan(22, 0, 0)" />
                <ValidationMessage For="@(() => EndTime)" class="text-danger" />
            </div>
        </div>

        <div class="form-group center">
            <button type="submit" class="btn btn-primary">Mượn thiết bị</button>
        </div>
    </EditForm>

    <!-- Confirmation Message -->
    @if (isSubmitted)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="successModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="successModalTitle">Đặt mượn thiết bị thành công!</h5>
                        <button type="button" class="btn-close bg-white" aria-label="Close" @onclick="RedirectToBookingPage"></button>
                    </div>
                    <div class="modal-body">
                        <div class="booking-details">
                            <div class="detail-row">
                                <strong>Thiết bị:</strong>
                                <span>@SelectedDevice?.TenThietBi</span>
                            </div>
                            <div class="detail-row">
                                <strong>Ngày:</strong>
                                <span>@BookingModel.ThoiGianMuon.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="detail-row">
                                <strong>Thời gian:</strong>
                                <span>@StartTime.ToString(@"hh\:mm") - @EndTime.ToString(@"hh\:mm")</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="RedirectToBookingPage">
                            Xem danh sách mượn thiết bị
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Confirmation Dialog -->
    @if (showConfirmation)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitle">Xác nhận mượn thiết bị</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmation"></button>
                    </div>
                    <div class="modal-body">
                        <div class="booking-details">
                            <div class="detail-row">
                                <strong>Thiết bị:</strong>
                                <span>@SelectedDevice?.TenThietBi</span>
                            </div>
                            <div class="detail-row">
                                <strong>Ngày mượn:</strong>
                                <span>@dateTime.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="detail-row">
                                <strong>Thời gian:</strong>
                                <span>@StartTime.ToString(@"hh\:mm") - @EndTime.ToString(@"hh\:mm")</span>
                            </div>
                            <div class="detail-row total">
                                <strong>Tổng tiền:</strong>
                                <span class="price">@BookingModel.TongTien.ToString("#,##0") đ</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseConfirmation">Hủy</button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmBooking">Xác nhận</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script>
    window.setupClickOutside = function (dotNetHelper) {
        document.addEventListener('click', function (e) {
            const dropdowns = document.querySelectorAll('.search-combobox');
            let clickedOutside = true;

            // Kiểm tra xem có click vào dropdown nào không
            dropdowns.forEach(dropdown => {
                if (dropdown.contains(e.target)) {
                    clickedOutside = false;
                }
            });

            if (clickedOutside) {
                dotNetHelper.invokeMethodAsync('CloseSearchDropdown');
            }
        });
    };
</script>

@code {
    private List<ThietBiModel>? AvailableDevices;
    private ThietBiModel? SelectedDevice;
    private PhieuMuonThietBiModel BookingModel = new();
    private bool isSubmitted = false;
    private bool showConfirmation = false;
    private bool deviceSelectionError = false;
    private string? errorMessage;
    private bool isLoggedIn = false;
    private NguoiDungModel user = new NguoiDungModel();
    private bool firstRender = true;
    // Search combobox variables
    private bool isDropdownOpen = false;
    private string searchInput = "";
    private List<ThietBiModel> filteredDevices = new();

    // Date and Time handling
    private DateTime dateTime = DateTime.Now;
    private TimeSpan StartTime { get; set; } = new TimeSpan(8, 0, 0); // 8:00 AM
    private TimeSpan EndTime { get; set; } = new TimeSpan(17, 0, 0); // 5:00 PM

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            await CheckLoginStatus();
            var objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupClickOutside", objRef);
            StateHasChanged(); 
        }
    }

    private async Task CheckLoginStatus()
    {
        try
        {
            var userData = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userData");

            Console.WriteLine(userData);

            if (!string.IsNullOrEmpty(userData))
            {
                isLoggedIn = true;

                // Deserialize user data from JSON
                var userInfo = System.Text.Json.JsonSerializer.Deserialize<NguoiDungModel>(userData);

                // Check if user data is valid
                if (userInfo == null)
                {
                    NavigationManager.NavigateTo("/login", true);
                    return;
                }

                // Populate profile model from user data
                user.MaNguoiDung = userInfo.MaNguoiDung;
                user.Email = userInfo.Email;
                user.HoVaTen = userInfo.HoVaTen;
                user.SoDienThoai = userInfo.SoDienThoai ?? string.Empty;
                user.DiaChi = userInfo.DiaChi ?? string.Empty;
                user.GioiTinh = userInfo.GioiTinh;

                // Parse date from string representation in localStorage
                if (DateTime.TryParse(userInfo.NgaySinh.ToString(), out DateTime ngaySinh))
                {
                    user.NgaySinh = ngaySinh;
                }
            }
            else
            {
                // No user data found, redirect to login
                isLoggedIn = false;
                NavigationManager.NavigateTo("/login", true);
            }
        }
        catch (Exception ex)
        {
            // Error handling
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            NavigationManager.NavigateTo("/login", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AvailableDevices = await DeviceService.GetAvailableDevices();
        BookingModel.TrangThai = "Đang mượn";
        filteredDevices = AvailableDevices?.ToList() ?? new();

    }

    private async Task PrepareBooking()
    {
        try
        {
            deviceSelectionError = false;
            errorMessage = null;

            if (BookingModel.MaThietBi<=0)
            {
                deviceSelectionError = true;
                errorMessage = "Vui lòng chọn thiết bị trước khi mượn.";
                return;
            }

            SelectedDevice = AvailableDevices?.FirstOrDefault(d => d.MaThietBi == BookingModel.MaThietBi);

            BookingModel.ThoiGianMuon = dateTime.Date + StartTime;
            BookingModel.ThoiGianTra = dateTime.Date + EndTime;
            BookingModel.MaNguoiDung = user.MaNguoiDung;

            if (SelectedDevice != null)
            {
                BookingModel.ThietBi = SelectedDevice;
                BookingModel.TongTien = SelectedDevice.GiaMuon;
                showConfirmation = true;
            }
            else
            {
                // If devices are not loaded from the database, create a temporary device for the confirmation
                SelectedDevice = new ThietBiModel
                    {
                        MaThietBi = BookingModel.MaThietBi,
                        TenThietBi = BookingModel.ThietBi.TenThietBi // Use the selected value as the name
                    };
                showConfirmation = true;
            }
        }
        catch (Exception ex)
        {
            // Handle any errors
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error in PrepareBooking: {ex.Message}");
        }
    }

    private void CloseConfirmation()
    {
        showConfirmation = false;
    }

    private async Task ConfirmBooking()
    {
        try
        {

            var result = await DeviceService.SaveDeviceBooking(BookingModel);


            if (result)
            {
                showConfirmation = false;

                await Task.Delay(300);

                isSubmitted = true;

                _ = Task.Run(async () =>
                {
                    await Task.Delay(5000); // 5 seconds
                    await InvokeAsync(() =>
                    {
                        NavigationManager.NavigateTo("/booking");
                        StateHasChanged();
                    });
                });
            }
            else
            {
                errorMessage = "Không thể mượn thiết bị. Vui lòng thử lại sau.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error in ConfirmBooking: {ex.Message}");
        }
    }

    private async Task RedirectToBookingPage()
    {
        await Task.Delay(500);

        NavigationManager.NavigateTo("/booking");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Update input text if a device is already selected
            if (SelectedDevice != null)
            {
                searchInput = SelectedDevice.TenThietBi;
                StateHasChanged();
            }
        }
    }

    private void HandleInputFocus()
    {
        isDropdownOpen = true;

        if (SelectedDevice != null)
        {
            string currentDeviceName = searchInput;

            SelectedDevice = null;
            BookingModel.MaThietBi = 0;

            searchInput = currentDeviceName;

            FilterDevices();
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void FilterDevices()
    {
        var searchTerm = searchInput?.ToLower() ?? "";

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredDevices = AvailableDevices?.ToList() ?? new();
        }
        else
        {
            filteredDevices = AvailableDevices?
                .Where(d => d.TenThietBi.ToLower().Contains(searchTerm))
                .ToList() ?? new();
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            isDropdownOpen = false;
        }
        else
        {
            FilterDevices();
        }
    }

    private void SelectDevice(ThietBiModel device)
    {
        BookingModel.MaThietBi = device.MaThietBi;
        SelectedDevice = device;
        searchInput = device.TenThietBi;
        isDropdownOpen = false;
    }

    [JSInvokable]
    public void CloseSearchDropdown()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;
            StateHasChanged();
        }
    }
}
