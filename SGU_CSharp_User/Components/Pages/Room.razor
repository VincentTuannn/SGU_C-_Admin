@page "/booking/room"
@using SGU_CSharp_User.Model
@using SGU_CSharp_User.Service
@using SGU_CSharp_User.Components.Shared
@inject RoomService RoomService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Blazored.Typeahead

@using Microsoft.JSInterop




<PageTitle>Đặt phòng</PageTitle>

<div class="container">
    <h1>Đặt phòng</h1>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    <EditForm Model="BookingModel" OnValidSubmit="PrepareBooking">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="form-group">
            <label for="room">Tên phòng:</label>
            <div class="search-combobox">
                <div class="search-combobox-input-container">
                    <input id="roomSearchInput"
                           type="text"
                           class="form-control"
                           placeholder="Nhập để tìm phòng..."
                           autocomplete="off"
                           @bind="searchInput"
                           @bind:event="oninput"
                           @onfocus="HandleInputFocus"
                           @onkeyup="HandleKeyUp" />
                    <button class="search-combobox-toggle" type="button" @onclick="ToggleDropdown">
                        <i class="bi bi-caret-down-fill"></i>
                    </button>
                </div>

                @if (isDropdownOpen)
                {
                    <div class="search-combobox-dropdown">
                        @if (!filteredRooms.Any())
                        {
                            <div class="search-combobox-item search-combobox-no-results">
                                Không tìm thấy phòng
                            </div>
                        }
                        else
                        {
                            @foreach (var room in filteredRooms)
                            {
                                <div 
                                class="search-combobox-item @(room.MaPhong == BookingModel.MaPhong ? "selected" : "")"
                                @onclick="() => SelectRoom(room)">
                                    <span class="room-name">@room.TenPhong</span>
                                    <span class="room-price">@room.GiaMuon.ToString("#,##0") đ</span>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <ValidationMessage For="@(() => BookingModel.MaPhong)" class="text-danger" />
        </div>

        <div class="selected-room-info">
            @if (SelectedRoom != null)
            {
                <div class="selected-room">
                    <div class="room-header">Phòng đã chọn</div>
                    <div class="room-details">
                        <div class="room-name">@SelectedRoom.TenPhong</div>
                        <div class="room-price">@SelectedRoom.GiaMuon.ToString("#,##0") đ/giờ</div>
                    </div>
                </div>
            }
            else
            {
                <div class="no-room-selected">
                    <i class="bi bi-info-circle-fill"></i> Vui lòng chọn phòng
                </div>
            }
        </div>

        <div class="form-group">
            <label for="bookingDate">Ngày đặt:</label>
            <InputDate id="bookingDate"
                       @bind-Value="dateTime"
                       @bind-Value:after="ValidateDateTime"
                       class="form-control" />
            <ValidationMessage For="@(() => BookingModel.ThoiGianMuon)" class="text-danger" />
        </div>

        <div class="form-group time">
            <div>
                <label for="startTime">Giờ bắt đầu:</label>
                <TimePickerComponent @bind-Value="StartTime"
                                     @bind-Value:after="ValidateDateTime"
                                     MinTime="new TimeSpan(7, 0, 0)"
                                     MaxTime="new TimeSpan(22, 0, 0)" />
                <ValidationMessage For="@(() => StartTime)" class="text-danger" />
            </div>
            <div>
                <label for="endTime">Giờ kết thúc:</label>
                <TimePickerComponent @bind-Value="EndTime"
                                     @bind-Value:after="ValidateDateTime"
                                     MinTime="new TimeSpan(7, 0, 0)"
                                     MaxTime="new TimeSpan(22, 0, 0)" />
                <ValidationMessage For="@(() => EndTime)" class="text-danger" />
            </div>
        </div>



        <div class="form-group center">
            <button type="submit" class="btn btn-primary">Đặt phòng</button>
        </div>
    </EditForm>

    @if (isSubmitted)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="successModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="successModalTitle">Đặt phòng thành công!</h5>
                        <button type="button" class="btn-close bg-white" aria-label="Close" @onclick="RedirectToBookingPage"></button>
                    </div>
                    <div class="modal-body">
                        <div class="booking-details">
                            <div class="detail-row">
                                <strong>Phòng:</strong>
                                <span>@SelectedRoom?.TenPhong</span>
                            </div>
                            <div class="detail-row">
                                <strong>Ngày:</strong>
                                <span>@BookingModel.ThoiGianMuon.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="detail-row">
                                <strong>Thời gian:</strong>
                                <span>@StartTime.ToString(@"hh\:mm") - @EndTime.ToString(@"hh\:mm")</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="RedirectToBookingPage">
                            Xem danh sách đặt phòng
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showConfirmation)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitle">Xác nhận đặt phòng</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmation"></button>
                    </div>
                    <div class="modal-body">
                        <div class="booking-details">
                            <div class="detail-row">
                                <strong>Phòng:</strong>
                                <span>@SelectedRoom?.TenPhong</span>
                            </div>
                            <div class="detail-row">
                                <strong>Loại phòng:</strong>
                                <span>@SelectedRoom?.LoaiPhong</span>
                            </div>
                            <div class="detail-row">
                                <strong>Ngày đặt:</strong>
                                <span>@dateTime.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="detail-row">
                                <strong>Thời gian:</strong>
                                <span>@StartTime.ToString(@"hh\:mm") - @EndTime.ToString(@"hh\:mm")</span>
                            </div>
                            <div class="detail-row">
                                <strong>Thời lượng:</strong>
                                <span>@((EndTime - StartTime).TotalHours) giờ</span>
                            </div>
                            <div class="detail-row total">
                                <strong>Tổng tiền:</strong>
                                <span class="price">@BookingModel.TongTien.ToString("#,##0") đ</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseConfirmation">Hủy</button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmBooking">Xác nhận</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>
<script>
    window.setupClickOutside = function (dotNetHelper) {
    document.addEventListener('click', function (e) {
    const dropdowns = document.querySelectorAll('.search-combobox');
    let clickedOutside = true;

    dropdowns.forEach(dropdown => {
    if (dropdown.contains(e.target)) {
    clickedOutside = false;
    }
    });

    if (clickedOutside) {
    dotNetHelper.invokeMethodAsync('CloseSearchDropdown');
    }
    });
    };
</script>

@code {
    private List<PhongModel>? AvailableRooms;
    private PhongModel? SelectedRoom;
    private PhieuMuonPhongModel BookingModel = new();
    private bool isSubmitted = false;
    private bool showConfirmation = false;
    private bool roomSelectionError = false;
    private string? errorMessage;
    private bool isLoggedIn = false;
    private NguoiDungModel user = new NguoiDungModel();
    private bool firstRender = true;

    private DateTime dateTime = DateTime.Now;
    private TimeSpan StartTime { get; set; } = new TimeSpan(8, 0, 0); // 8:00 AM
    private TimeSpan EndTime { get; set; } = new TimeSpan(17, 0, 0); // 5:00 PM

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            await CheckLoginStatus();
            var objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupClickOutside", objRef);

            StateHasChanged(); 
        }
    }
    private async Task CheckLoginStatus()
    {
        try
        {
            var userData = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userData");

            Console.WriteLine(userData);

            if (!string.IsNullOrEmpty(userData))
            {
                isLoggedIn = true;

                var userInfo = System.Text.Json.JsonSerializer.Deserialize<NguoiDungModel>(userData);

                if (userInfo == null)
                {
                    NavigationManager.NavigateTo("/login", true);
                    return;
                }

                user.MaNguoiDung = userInfo.MaNguoiDung;
                user.Email = userInfo.Email;
                user.HoVaTen = userInfo.HoVaTen;
                user.SoDienThoai = userInfo.SoDienThoai ?? string.Empty;
                user.DiaChi = userInfo.DiaChi ?? string.Empty;
                user.GioiTinh = userInfo.GioiTinh;

                if (DateTime.TryParse(userInfo.NgaySinh.ToString(), out DateTime ngaySinh))
                {
                    user.NgaySinh = ngaySinh;
                }
            }
            else
            {
                isLoggedIn = false;
                NavigationManager.NavigateTo("/login", true);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            NavigationManager.NavigateTo("/login", true);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        AvailableRooms = await RoomService.GetEmptyRoom();
        BookingModel.TrangThai = "Đang mượn";
        filteredRooms = AvailableRooms?.ToList() ?? new();

    }
    private async Task<bool> IsValidBookingTime(int roomId, DateTime startTime, DateTime endTime)
    {
        try
        {            
            // Khoảng thời gian tối thiểu giữa các lần đặt
            int minimum = 1;


            // Lấy danh sách các phiếu đặt phòng hiện có
            var existingBookings = await RoomService.GetRoomBookings(roomId);
            TimeSpan minimumGap = TimeSpan.FromHours(minimum);

            foreach (var booking in existingBookings)
            {
                //Phiếu đặt mới nằm sau phiếu hiện có
                if (startTime >= booking.ThoiGianTra &&
                    (startTime - booking.ThoiGianTra) < minimumGap)
                {
                    errorMessage = $"Phải đặt sau thời gian trả phiếu hiện có ít nhất {minimum} tiếng (sau {FormatToAmPm(booking.ThoiGianTra.AddHours(minimum))})";
                    return false;
                }

                //Phiếu đặt mới nằm trước phiếu hiện có
                if (endTime <= booking.ThoiGianMuon &&
                    (booking.ThoiGianMuon - endTime) < minimumGap)
                {
                    errorMessage = $"Phải trả trước thời gian đặt phiếu tiếp theo ít nhất {minimum} tiếng (trước {FormatToAmPm(booking.ThoiGianMuon.AddHours(-minimum))})";
                    return false;
                }

                //Phiếu đặt mới trùng với phiếu hiện có
                if ((startTime >= booking.ThoiGianMuon && startTime < booking.ThoiGianTra) ||
                    (endTime > booking.ThoiGianMuon && endTime <= booking.ThoiGianTra) ||
                    (startTime <= booking.ThoiGianMuon && endTime >= booking.ThoiGianTra))
                {
                    errorMessage = $"Phòng đã được đặt trong khoảng thời gian từ {FormatToAmPm(booking.ThoiGianMuon)} đến {FormatToAmPm(booking.ThoiGianTra)}";
                    return false;
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error in IsValidBookingTime: {ex.Message}");
            return false;
        }
    }
    public static string FormatToAmPm(DateTime time)
    {
        return time.ToString("hh:mm tt", System.Globalization.CultureInfo.InvariantCulture);
    }


    private async Task PrepareBooking()
    {
        try
        {
            roomSelectionError = false;
            errorMessage = null;

            if (BookingModel.MaPhong <= 0)
            {
                roomSelectionError = true;
                errorMessage = "Vui lòng chọn phòng trước khi đặt.";
                return;
            }

            var now = DateTime.Now;
            var bookingDate = dateTime.Date;

            // Kiểm tra ngày đặt không được là ngày trong quá khứ
            if (bookingDate.Date < now.Date)
            {
                errorMessage = "Ngày đặt không thể là ngày trong quá khứ.";
                return;
            }

            // Kiểm tra thời gian bắt đầu phải sớm hơn thời gian kết thúc
            if (StartTime >= EndTime)
            {
                errorMessage = "Thời gian kết thúc phải sau thời gian bắt đầu.";
                return;
            }

            // Kiểm tra thời gian làm việc (7:00 - 22:00)
            var minTime = new TimeSpan(7, 0, 0);
            var maxTime = new TimeSpan(22, 0, 0);

            if (StartTime < minTime || EndTime > maxTime)
            {
                errorMessage = "Thời gian đặt phòng phải trong khoảng từ 7:00 đến 22:00.";
                return;
            }

            // Kiểm tra nếu đặt trong ngày hiện tại
            if (bookingDate.Date == now.Date)
            {
                if (StartTime <= now.TimeOfDay)
                {
                    errorMessage = "Thời gian bắt đầu phải sau thời gian hiện tại.";
                    return;
                }
            }

            SelectedRoom = AvailableRooms?.FirstOrDefault(r => r.MaPhong == BookingModel.MaPhong);
            BookingModel.ThoiGianMuon = dateTime.Date + StartTime;
            BookingModel.ThoiGianTra = dateTime.Date + EndTime;
            BookingModel.MaNguoiDung = user.MaNguoiDung;

         
            bool isValidTime = await IsValidBookingTime(
                BookingModel.MaPhong,
                BookingModel.ThoiGianMuon,
                BookingModel.ThoiGianTra);

            if (!isValidTime)
            {
                return; 
            }

            if (SelectedRoom != null)
            {
                BookingModel.Phong = SelectedRoom;
                BookingModel.TongTien = CalculateRoomCost(SelectedRoom, StartTime, EndTime);
                showConfirmation = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error in PrepareBooking: {ex.Message}");
        }
    }
    private void ValidateDateTime()
    {
        try
        {
            var now = DateTime.Now;
            var bookingDate = dateTime.Date;
            errorMessage = null;

            // Kiểm tra ngày đặt không được là ngày trong quá khứ
            if (bookingDate.Date < now.Date)
            {
                errorMessage = "Ngày đặt không thể là ngày trong quá khứ.";
                return;
            }

            // Kiểm tra thời gian bắt đầu phải sớm hơn thời gian kết thúc
            if (StartTime >= EndTime)
            {
                errorMessage = "Thời gian kết thúc phải sau thời gian bắt đầu.";
                return;
            }

            // Kiểm tra thời gian làm việc (7:00 - 22:00)
            var minTime = new TimeSpan(7, 0, 0);
            var maxTime = new TimeSpan(22, 0, 0);

            if (StartTime < minTime || EndTime > maxTime)
            {
                errorMessage = "Thời gian đặt phòng phải trong khoảng từ 7:00 đến 22:00.";
                return;
            }

            // Kiểm tra nếu đặt trong ngày hiện tại
            if (bookingDate.Date == now.Date && StartTime <= now.TimeOfDay)
            {
                errorMessage = "Thời gian bắt đầu phải sau thời gian hiện tại.";
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error in ValidateDateTime: {ex.Message}");
        }
    }


    private decimal CalculateRoomCost(PhongModel room, TimeSpan startTime, TimeSpan endTime)
    {
        var duration = (endTime - startTime).TotalHours;
        return (decimal)duration * room.GiaMuon;
    }
    private void CloseConfirmation()
    {
        showConfirmation = false;
    }
    private async Task ConfirmBooking()
    {
        try
        {
            var result = await RoomService.SaveBooking(BookingModel);

            if (result)
            {
                showConfirmation = false;

                await Task.Delay(300);

                isSubmitted = true;

                _ = Task.Run(async () =>
                {
                    await Task.Delay(5000); // 5 seconds
                    await InvokeAsync(() =>
                    {
                        NavigationManager.NavigateTo("/booking");
                        StateHasChanged();
                    });
                });
            }
            else
            {
                errorMessage = "Không thể đặt phòng. Vui lòng thử lại sau.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConfirmBooking: {ex.Message}");
        }
    }
    private async Task RedirectToBookingPage()
    {
        await Task.Delay(500);

        NavigationManager.NavigateTo("/booking");
    }
    private List<PhongModel> filteredRooms = new();

    protected override void OnInitialized()
    {
        filteredRooms = AvailableRooms?.ToList() ?? new();
    }
    private void HandleInputFocus()
    {
        isDropdownOpen = true;

        if (SelectedRoom != null)
        {
            string currentRoomName = searchInput;

            SelectedRoom = null;
            BookingModel.MaPhong = 0;

            searchInput = currentRoomName;

            FilterRooms();
        }
    }


    private void FilterRooms(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString()?.ToLower() ?? "";

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRooms = AvailableRooms?.ToList() ?? new();
        }
        else
        {
            filteredRooms = AvailableRooms?
                .Where(r => r.TenPhong.ToLower().Contains(searchTerm))
                .ToList() ?? new();
        }
    }

    private void OnRoomChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int roomId))
        {
            BookingModel.MaPhong = roomId;
            SelectedRoom = AvailableRooms?.FirstOrDefault(r => r.MaPhong == roomId);
        }
    }
    private bool isDropdownOpen = false;
    private string searchInput = "";


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (SelectedRoom != null)
            {
                searchInput = SelectedRoom.TenPhong;
                StateHasChanged();
            }
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void FilterRooms()
    {
        var searchTerm = searchInput?.ToLower() ?? "";

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRooms = AvailableRooms?.ToList() ?? new();
        }
        else
        {
            filteredRooms = AvailableRooms?
                .Where(r => r.TenPhong.ToLower().Contains(searchTerm))
                .ToList() ?? new();
        }
    }

    private void SelectRoom(PhongModel room)
    {
        BookingModel.MaPhong = room.MaPhong;
        SelectedRoom = room;
        searchInput = room.TenPhong;
        isDropdownOpen = false;
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            isDropdownOpen = false;
        }
        else
        {
            FilterRooms();
        }
    }


    [JSInvokable]
    public void CloseSearchDropdown()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;
            StateHasChanged();
        }
    }



}
