@* TimePickerComponent.razor *@
<div class="time-picker">
    <select @bind="SelectedHour" @bind:event="onchange" class="form-select time-select">
        @foreach (var hour in Hours)
        {
            <option value="@hour">
                @(hour == 12 ? "12" : (hour % 12).ToString())
            </option>
        }
    </select>
    <span class="time-separator">:</span>
    <select @bind="SelectedMinute" @bind:event="onchange" class="form-select time-select">
        @foreach (var minute in Minutes)
        {
            <option value="@minute">@minute.ToString("00")</option>
        }
    </select>
    <select @bind="Period" @bind:event="onchange" class="form-select time-select period">
        <option value="AM">AM</option>
        <option value="PM">PM</option>
    </select>
</div>

@code {
    [Parameter]
    public TimeSpan Value { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> ValueChanged { get; set; }

    [Parameter]
    public TimeSpan MinTime { get; set; } = new TimeSpan(7, 0, 0); // 7 AM

    [Parameter]
    public TimeSpan MaxTime { get; set; } = new TimeSpan(22, 0, 0); // 10 PM

    private readonly int[] Hours = Enumerable.Range(1, 12).ToArray();
    private readonly int[] Minutes = new[] { 0, 30 };

    private string Period
    {
        get => Value.Hours >= 12 ? "PM" : "AM";
        set
        {
            var currentHour = Value.Hours % 12;
            if (currentHour == 0) currentHour = 12;

            var newHour = currentHour;
            if (value == "PM" && currentHour != 12)
            {
                newHour = currentHour + 12;
            }
            else if (value == "AM" && currentHour == 12)
            {
                newHour = 0;
            }
            else if (value == "AM" && currentHour > 12)
            {
                newHour = currentHour - 12;
            }

            UpdateTime(newHour, Value.Minutes);
        }
    }

    private int SelectedHour
    {
        get
        {
            var hour = Value.Hours % 12;
            return hour == 0 ? 12 : hour;
        }
        set
        {
            var newHour = value;
            if (Period == "PM" && value != 12)
            {
                newHour += 12;
            }
            else if (Period == "AM" && value == 12)
            {
                newHour = 0;
            }

            UpdateTime(newHour, Value.Minutes);
        }
    }

    private int SelectedMinute
    {
        get => Value.Minutes;
        set => UpdateTime(Value.Hours, value);
    }

    protected override void OnInitialized()
    {
        if (Value == default)
        {
            Value = MinTime;
        }
    }

    protected override void OnParametersSet()
    {
        if (Value < MinTime) Value = MinTime;
        if (Value > MaxTime) Value = MaxTime;
    }

    private async Task UpdateTime(int hours, int minutes)
    {
        var newTime = new TimeSpan(hours, minutes, 0);

        // Ensure the new time is within bounds
        if (newTime < MinTime) newTime = MinTime;
        if (newTime > MaxTime) newTime = MaxTime;

        if (newTime != Value)
        {
            Value = newTime;
            await ValueChanged.InvokeAsync(newTime);
            StateHasChanged();
        }
    }
}
